name: image-simple
on:
  push:
    tags:
      - "Armbian*" # any tag. GH releases (containing binaries for download) require tags
  workflow_dispatch:

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'armbian' }}
    outputs:
      tagName: ${{ steps.tagName.outputs.tag }}
    steps:
      - uses: olegtarasov/get-tag@14deb5cb39a98e81adb64f8ac8b27aefab278784 # get the tag name from the ref. v2.1.2 https://github.com/olegtarasov/get-tag/releases/tag/v2.1.2
        id: tagName
      # This creates an empty release on the tag with just the header.
      - name: Release ${{ matrix.board }}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        if: startsWith(github.ref, 'refs/tags/') # only for tags. GitHub requires tags for releases.
        with:
          append_body: true # append, since we've descriptions in there already
          body: |
            ### Release ${{ steps.tagName.outputs.tag }} images below, in no particular order
  "Images": # short name because GH will expand with the matrix values
    needs: [ prepare ]
    timeout-minutes: 60
    if: ${{ github.repository_owner == 'armbian' }}
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        # board: the BOARD= to build
        # desc: markdown for description in release notes
        # variant: env vars to pass both to scripts and ./compile.sh
        # aa: GH Actions orders the jobs by the first key value. 'aa' should be first. it never is. it is actually quite pointless trying. it's effectively random.

        include:
          # 0000 = stuff I need first for emergency reasons, avoid.
          # 0100 = meson64 stuff (fixed version), boards I own first, then others
          # 0200 = uefi stuff (fixed version)
          # 0500+ other stuff
          # 0100 = meson64 stuff (fixed version), boards I own first, then others
          - aa: 0111
            board: bananapim5
            desc: BananaPi M5, edge, regular CLI
            runner_tags: qemu
            variant: "CLOUD_IMAGE=no BRANCH=edge"

          - aa: 0115
            board: odroidn2
            desc: ODROID N2+, edge, regular CLI
            runner_tags: qemu
            variant: "CLOUD_IMAGE=no BRANCH=edge"

    runs-on: "${{ matrix.runner_tags }}"
    name: "${{ matrix.aa }} ${{ matrix.desc }}"
    env:
      BOARD: "${{ matrix.board }}"
      VARIANT: "${{ matrix.variant }}"
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs' COMPRESS_OUTPUTIMAGE=xz "
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/build
          ref: main
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build board ${{ matrix.board }}
        id: buildBoard
        run: |
          #mkdir -p userpatches
          #echo "${{needs.prepare.outputs.tagName}}-${{ github.repository_owner }}" > userpatches/VERSION                    
          bash ./compile.sh BOARD=${{env.BOARD}} BRANCH=edge RELEASE=jammy KERNEL_CONFIGURE=no KERNEL_ONLY=no BUILD_DESKTOP=no BUILD_MINIMAL=yes
          
      - name: Release ${{ matrix.board }}
        id: release1
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        if: startsWith(github.ref, 'refs/tags/') # only for tags. GitHub requires tags for releases.
        with:
          files: |
            output/images/*.xz
      - name: Release ${{ matrix.board }} (retry if 1st failed)
        id: release2
        if: steps.release1.outcome == 'failure'
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        with:
          files: |
            output/images/*.xz
      - name: Cleanup output images
        if: always()
        run: |
          rm -rf output/images userpatches/VERSION
