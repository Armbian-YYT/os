name: Reusable

on:

  workflow_call:
    inputs:
      config:
       required: true
       type: string
      branch:
       required: false
       type: string
      release:
       required: false
       type: string
      variant:
       required: false
       type: string

jobs:

  prepare:

    name: "Make JSON"
    if: ${{ github.repository_owner == 'armbian' }}
    runs-on: qemu
    outputs:
      matrix:  ${{steps.json.outputs.JSON_CONTENT}}
    steps:

      - name: Checkout Armbian Framework
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/build
          ref:  main
          fetch-depth: 1
          path: build

      - name: Checkout Armbian OS Config
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/os
          ref:  main
          fetch-depth: 1
          path: os

      - name: "Make JSON"
        id: json
        run: |
        
          FILTER='.[]'
          [[ -n ${{ inputs.branch }}" ]]  && FILTER=' | select(.branch=="${{ inputs.branch }}")'
          [[ -n ${{ inputs.release }}" ]] && FILTER=' | select(.release=="${{ inputs.release }}")'
          [[ -n ${{ inputs.variant }}" ]] && FILTER=' | select(.variant=="${{ inputs.variant }}")'
          
          echo $FILTER
         
          # Make a list of valid pairs from our config
          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          cat os/targets/"${{ inputs.config }}" | grep -v "^$" | grep -v "^#" | \
          awk '{print  "{\"board\":\""$1"\",\"branch\":\""$2"\",\"release\":\""$3"\",\"variant\":\""$4"\",\"runner_tag\":\"qemu\"}"}' | jq >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
  Docker:

    name: "B"
    needs: [ prepare ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix) }}

    env:
      BOARD:           "${{ matrix.board }}"
      BRANCH:          "${{ matrix.branch }}"      
      RELEASE:         "${{ matrix.release }}"
      VARIANT:         "${{ matrix.variant }}"
      RUNNER_TAG:      "${{ matrix.runner_tag }}"
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      
    runs-on: ubuntu-latest

    steps:

        # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}            # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: armbian/build #${{ github.repository_owner }}/armbian-build
          ref: main
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Create rootfs ${{env.RELEASE}}:${{env.ARCH}} (variant ${{env.VARIANT}}) (desktop ${{env.DESKTOP}})
        id: rootfs
        run: |
         
#          bash ./compile.sh rootfs BUILD_MINIMAL="${{ inputs.minimal }}" RELEASE="${{env.RELEASE}}" ARCH="${{env.ARCH}}" BUILD_DESKTOP="${{ matrix.desktop }}" DESKTOP_APPGROUPS_SELECTED="${{env.VARIANT}}" DESKTOP_ENVIRONMENT="${{env.DESKTOP}}" DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base SKIP_ARMBIAN_REPO=yes
