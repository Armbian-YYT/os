name: "Build All Artifacts (cronjob)"

on:
  workflow_dispatch:

env:
  
  BUILD_REPOSITORY: "armbian/build"
  USERPATCHES_REPOSITORY: "armbian/os"
  USERPATCHES_REF: "main" # branch or tag or sha1
  USERPATCHES_DIR: "userpatches" # folder inside USERPATCHES_REPOSITORY
  GH_TOKEN: "${{ secrets.RELEASE_TOKEN }}"

jobs:

  version_prep:
    name: "Create release notes"
    runs-on: [ "ubuntu-latest" ]
    steps:

      # Clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false # true is default.

      - name: Read version from file if nor overriden
        if: ${{ ! github.event.inputs.versionOverride }}
        run: |
          mkdir -p downloads
          #cat "${{ steps.versionfile.outputs.file }}.json" | jq '.version' | sed "s/\"//g" | sed 's/^/VERSION_OVERRIDE=/' >> $GITHUB_ENV
          #cat "${{ steps.versionfile.outputs.file }}.json" | jq '.version' | sed "s/\"//g" > downloads/version

          cat "nightly.json" | jq '.version' | sed "s/\"//g" | sed 's/^/VERSION_OVERRIDE=/' >> $GITHUB_ENV
          cat "nightly.json" | jq '.version' | sed "s/\"//g" > downloads/version
          
      - uses: ncipollo/release-action@v1
        #if: ${{ (github.event.inputs.nightlybuild || 'yes') == 'yes' && (github.event.inputs.skipImages || 'yes') != 'yes' }}
        with:
          owner: 'armbian'
          repo: 'build'
          tag: "${{ env.VERSION_OVERRIDE }}"
          name: "${{ env.VERSION_OVERRIDE }}"
          generateReleaseNotes: "true"
          prerelease: "true"
          allowUpdates: "false"
          skipIfReleaseExists: "true"
          token: ${{ secrets.RELEASE_TOKEN }}        
